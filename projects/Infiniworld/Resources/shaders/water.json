{
  "title": "Water",
  "fragmentScript": "uniform float time;\nuniform float waveHeight;\nuniform float liquidAlpha;\nuniform vec3 liquidColor;\nuniform vec3 foamColor;\nuniform float waveFrequency;\nuniform float fresnelPower;\nuniform vec3 lightDirection;\nuniform float ambientIntensity;\nuniform float specularIntensity;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 vViewPosition;\nvarying float vWaveHeight;\nvarying float vNormalizedWaveHeight; // New varying for normalized height\nvarying vec3 vWorldPosition;\nuniform vec3 fogColor;\nuniform float fogDensity;\n\nvoid main() {\n    vec2 uv = vUv;\n    vec3 normal = normalize(vNormal);\n    vec3 viewDir = normalize(vViewPosition);\n    vec3 lightDir = normalize(lightDirection);\n\n    // Fresnel effect for edge transparency\n    float fresnel = pow(1.0 - max(dot(normal, viewDir), 0.0), fresnelPower);\n\n    // Diffuse lighting\n    float diffuse = max(dot(normal, lightDir), 0.0) * 0.25;\n\n    // Specular (Blinn-Phong)\n    vec3 halfwayDir = normalize(lightDir + viewDir);\n    float specular = pow(max(dot(normal, halfwayDir), 0.0), 32.0) * specularIntensity;\n\n    // Base color with subtle wave height modulation\n    vec3 baseColor = liquidColor * (0.8 + 0.2 * vNormalizedWaveHeight); // Slight tint variation\n\n    // Foam effect based on normalized wave height\n    float foamFactor = smoothstep(0.8, 1.0, vNormalizedWaveHeight); // Tighter range for foam at peaks\n    vec3 color = mix(baseColor, baseColor, foamFactor);\n  \n    float fogDistance = length(vWorldPosition - cameraPosition); // Distance from fragment to camera\n    float fogFactor = exp2(-fogDensity * fogDensity * fogDistance * fogDistance * 1.442695); // 1.442695 = ln(2)\n    fogFactor = clamp(fogFactor, 0.0, 1.0);\n    // Combine lighting components\n    vec3 lightColor = color * (ambientIntensity + diffuse) + vec3(specular);\n\t\tvec3 finalColor = mix(fogColor, lightColor, fogFactor);\n    // Apply fresnel for transparency at edges\n    float alpha = mix(0.6, 1.0, fresnel) * liquidAlpha;\n\n    gl_FragColor = vec4(baseColor, alpha);\n}",
  "vertexScript": "uniform float time;\nuniform float waveHeight;\nuniform float waveFrequency;\nuniform float waveSpeed;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 vViewPosition;\nvarying float vWaveHeight;\nvarying float vNormalizedWaveHeight;\nvarying vec3 vWorldPosition;\n\n// 2D Random function for seeding noise\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// 2D Noise function (simplified Perlin-like noise)\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n           (c - a) * u.y * (1.0 - u.x) +\n           (d - b) * u.x * u.y;\n}\n\nvoid main() {\n    vUv = uv;\n\n    // Generate smooth noise for subtle variation\n    float noiseScale = 0.3; // Larger scale for smoother noise\n    float noiseSpeed = 0.05; // Slower noise evolution\n    float noiseValue = noise(vUv * noiseScale + time * noiseSpeed);\n    float noiseValue2 = noise(vUv * noiseScale * 0.5 + time * noiseSpeed * 0.7 + 10.0);\n\n    // Introduce a dominant wave direction (e.g., along x-axis, simulating wind direction)\n    float directionalWave = sin(vUv.x * waveFrequency + time * waveSpeed + noiseValue * 0.5) * waveHeight;\n\n    // Add smaller, secondary waves with slight noise variation\n    float secondaryWave = sin(vUv.x * waveFrequency * 1.5 + vUv.y * waveFrequency * 0.3 + time * waveSpeed * 0.8 + noiseValue2 * 0.3) * waveHeight * 0.4;\n    float detailWave = cos(vUv.x * waveFrequency * 2.0 + vUv.y * waveFrequency * 0.5 + time * waveSpeed * 1.2) * waveHeight * 0.2 * (0.8 + 0.2 * noiseValue);\n\n    // Combine waves with a softer mix\n    float displacementY = directionalWave + secondaryWave + detailWave;\n\n    // Store wave height for fragment shader\n    vWaveHeight = displacementY;\n\n    // Normalize wave height based on maximum possible displacement\n    float maxWaveHeight = waveHeight * (1.0 + 0.4 + 0.2); // Sum of wave amplitudes\n    vNormalizedWaveHeight = clamp(displacementY / maxWaveHeight, -1.0, 1.0);\n\n    // Update position with displacement\n    vec3 newPosition = vec3(position.x, position.y + displacementY, position.z);\n\n    // Compute normal for lighting\n    float offset = 0.01;\n    float waveX = (sin((vUv.x + offset) * waveFrequency + time * waveSpeed + noiseValue * 0.5) +\n                   sin((vUv.x + offset) * waveFrequency * 1.5 + (vUv.y + offset) * waveFrequency * 0.3 + time * waveSpeed * 0.8 + noiseValue2 * 0.3) * 0.4 +\n                   cos((vUv.x + offset) * waveFrequency * 2.0 + (vUv.y + offset) * waveFrequency * 0.5 + time * waveSpeed * 1.2) * 0.2 * (0.8 + 0.2 * noiseValue)) * waveHeight;\n    float waveZ = (sin(vUv.x * waveFrequency + time * waveSpeed + noiseValue * 0.5) +\n                   sin(vUv.x * waveFrequency * 1.5 + (vUv.y + offset) * waveFrequency * 0.3 + time * waveSpeed * 0.8 + noiseValue2 * 0.3) * 0.4 +\n                   cos(vUv.x * waveFrequency * 2.0 + (vUv.y + offset) * waveFrequency * 0.5 + time * waveSpeed * 1.2) * 0.2 * (0.8 + 0.2 * noiseValue)) * waveHeight;\n    vec3 tangent = normalize(vec3(1.0, (waveX - displacementY) / offset, 0.0));\n    vec3 bitangent = normalize(vec3(0.0, (waveZ - displacementY) / offset, 1.0));\n    vNormal = normalize(cross(tangent, bitangent));\n\n    // Pass view position for fresnel and lighting\n    vec4 worldPosition = modelMatrix * vec4(newPosition, 1.0);\n    vViewPosition = (cameraPosition - worldPosition.xyz);\n    vWorldPosition = worldPosition.xyz;\n\n    // Apply projection and model-view transforms\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n}",
  "uniforms": "{\"time\":{\"value\":0},\"waveHeight\":{\"value\":2},\"waveFrequency\":{\"value\":15},\"waveSpeed\":{\"value\":2.5},\"liquidAlpha\":{\"value\":0.75},\"liquidColor\":{\"value\":\"\"},\"foamColor\":{\"value\":\"\"},\"fresnelPower\":{\"value\":0},\"lightDirection\":{\"value\":[0.5,0.5,0.5]},\"ambientIntensity\":{\"value\":1},\"specularIntensity\":{\"value\":1}}",
  "vectors": [
    "foamColor",
    "liquidColor",
    "lightDirection"
  ],
  "liquidColor": "#0288d1",
  "foamColor": "#0288d1"
}